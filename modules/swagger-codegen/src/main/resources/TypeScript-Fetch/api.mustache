{{>licenseInfo}}
import * as querystring from "querystring";
import * as url from "url";

{{^supportsTS22}}
import * as isomorphicFetch from "isomorphic-fetch";
{{/supportsTS22}}
{{^supportsES6}}
{{^useCustomAssignPolyfill}}
import * as assign from "core-js/library/fn/object/assign";
{{/useCustomAssignPolyfill}}
{{/supportsES6}}

import { Configuration } from "./configuration";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "{{{basePath}}}".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetchApi: FetchAPI;
    public configuration: Configuration;

    constructor(fetchApi: FetchAPI = {{#supportsTS22}}fetch{{/supportsTS22}}{{^supportsTS22}}isomorphicFetch{{/supportsTS22}}, basePath: string = BASE_PATH, configuration: Configuration = new Configuration()) {
        this.basePath = basePath;
        this.fetchApi = fetchApi;
        this.configuration = configuration;
    }
}

{{#models}}
{{#model}}
{{#description}}
/**
 * {{{description}}}
 */
{{/description}}
{{^isEnum}}
export interface {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{/isEnum}}
{{#isEnum}}
export type {{{classname}}} = {{#allowableValues}}{{#values}}"{{{.}}}"{{^-last}} | {{/-last}}{{/values}}{{/allowableValues}};
{{/isEnum}}
{{#vars}}
{{#description}}
    /**
     * {{{description}}}
     */
{{/description}}
    "{{name}}"{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};
{{/vars}}
{{^isEnum}}
}
{{/isEnum}}

{{#hasEnums}}
{{#vars}}
{{#isEnum}}
export type {{{enumName}}} = {{#allowableValues}}{{#values}}"{{{.}}}"{{^-last}} | {{/-last}}{{/values}}{{/allowableValues}};
{{/isEnum}}
{{/vars}}
{{/hasEnums}}
{{/model}}
{{/models}}

{{#apiInfo}}
{{#apis}}
{{#operations}}

/**
 * {{classname}} - fetch parameter creator{{#description}}
 * {{&description}}{{/description}}
 */
export const {{classname}}FetchParamCreator = {
{{#operation}}
    /**{{#summary}}
     * {{summary}}{{/summary}}{{#notes}}
     * {{notes}}{{/notes}}{{#allParams}}
     * @param {{paramName}}{{#description}} {{description}}{{/description}}{{/allParams}}
     */
    {{nickname}}({{#hasParams}}params: { {{#allParams}} {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/allParams}} }, {{/hasParams}}{{#hasAuthMethods}}configuration: Configuration, {{/hasAuthMethods}}options: any = {}): FetchArgs {
{{#allParams}}
{{#required}}
        // verify required parameter "{{paramName}}" is set
        if (params["{{paramName}}"] == null) {
            throw new Error("Missing required parameter {{paramName}} when calling {{nickname}}");
        }
{{/required}}
{{/allParams}}
        const baseUrl = `{{{path}}}`{{#pathParams}}
            .replace(`{${"{{baseName}}"}}`, `${ params["{{paramName}}"] }`){{/pathParams}};
        let urlObj = url.parse(baseUrl, true);
{{#hasQueryParams}}
        urlObj.query = {{#supportsES6}}Object.{{/supportsES6}}{{^supportsES6}}{{#useCustomAssignPolyfill}}Object.{{/useCustomAssignPolyfill}}{{/supportsES6}}assign({}, urlObj.query, {
            {{#queryParams}}
            "{{baseName}}": params["{{paramName}}"],
            {{/queryParams}}
        });
{{/hasQueryParams}}
        let fetchOptions: RequestInit = {{#supportsES6}}Object.{{/supportsES6}}{{^supportsES6}}{{#useCustomAssignPolyfill}}Object.{{/useCustomAssignPolyfill}}{{/supportsES6}}assign({}, { method: "{{httpMethod}}" }, options);

        let contentTypeHeader: Dictionary<string> = {};
{{#hasFormParams}}
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
        {{#formParams}}
            "{{baseName}}": params["{{paramName}}"],
        {{/formParams}}
        });
{{/hasFormParams}}
{{#hasBodyParam}}
        contentTypeHeader = { "Content-Type": "application/json" };{{#bodyParam}}
        if (params["{{paramName}}"]) {
            fetchOptions.body = JSON.stringify(params["{{paramName}}"] || {});
        }{{/bodyParam}}
{{/hasBodyParam}}
{{#hasHeaderParams}}
        fetchOptions.headers = {{#supportsES6}}Object.{{/supportsES6}}{{^supportsES6}}{{#useCustomAssignPolyfill}}Object.{{/useCustomAssignPolyfill}}{{/supportsES6}}assign({
            {{#headerParams}}"{{baseName}}": params["{{paramName}}"],{{/headerParams}}
        }, contentTypeHeader);
{{/hasHeaderParams}}
{{^hasHeaderParams}}
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
{{/hasHeaderParams}}
{{#authMethods}}
        // authentication ({{name}}) required
{{#isApiKey}}
{{#isKeyInHeader}}
        if (configuration.apiKey && configuration.apiKey.{{keyParamName}}) {
            fetchOptions.headers = {{#supportsES6}}Object.{{/supportsES6}}{{^supportsES6}}{{#useCustomAssignPolyfill}}Object.{{/useCustomAssignPolyfill}}{{/supportsES6}}assign({
                    "{{keyParamName}}": configuration.apiKey.{{keyParamName}},
                    }, contentTypeHeader);
        }
{{/isKeyInHeader}}
{{#isKeyInQuery}}
        if (configuration.apiKey && configuration.apiKey.{{keyParamName}}) {
            urlObj.query = {{#supportsES6}}Object.{{/supportsES6}}{{^supportsES6}}{{#useCustomAssignPolyfill}}Object.{{/useCustomAssignPolyfill}}{{/supportsES6}}assign({}, urlObj.query, {
                    "{{keyParamName}}": configuration.apiKey.{{keyParamName}},
                    });
        }
{{/isKeyInQuery}}
{{/isApiKey}}
{{#isBasic}}
        // http basic authentication required
        if (configuration.username || configuration.password) {
            fetchOptions.headers = {{#supportsES6}}Object.{{/supportsES6}}{{^supportsES6}}{{#useCustomAssignPolyfill}}Object.{{/useCustomAssignPolyfill}}{{/supportsES6}}assign({
                    "Authorization": "Basic " + btoa(configuration.username + ":" + configuration.password),
                    }, contentTypeHeader);
        }
{{/isBasic}}
{{#isOAuth}}
        // oauth required
        if (configuration.accessToken) {
            fetchOptions.headers = {{#supportsES6}}Object.{{/supportsES6}}{{^supportsES6}}{{#useCustomAssignPolyfill}}Object.{{/useCustomAssignPolyfill}}{{/supportsES6}}assign({
                    "Authorization": "Bearer " + configuration.accessToken,
                    }, contentTypeHeader);
        }
{{/isOAuth}}
{{/authMethods}}

        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
{{/operation}}
};

/**
 * {{classname}} - functional programming interface{{#description}}
 * {{&description}}{{/description}}
 */
export const {{classname}}Fp = {
{{#operation}}
    /**{{#summary}}
     * {{summary}}{{/summary}}{{#notes}}
     * {{notes}}{{/notes}}{{#allParams}}
     * @param {{paramName}}{{#description}} {{description}}{{/description}}{{/allParams}}
     */
    {{nickname}}({{#hasParams}}params: { {{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}; {{/allParams}} }, {{/hasParams}}{{#hasAuthMethods}}configuration: Configuration, {{/hasAuthMethods}}options: any = {}): (fetchApi: FetchAPI, basePath?: string) => Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}any{{/returnType}}> {
        const fetchArgs = {{classname}}FetchParamCreator.{{nickname}}({{#hasParams}}params, {{/hasParams}}{{#hasAuthMethods}}configuration, {{/hasAuthMethods}}options);
        return (fetchApi: FetchAPI = {{#supportsTS22}}fetch{{/supportsTS22}}{{^supportsTS22}}isomorphicFetch{{/supportsTS22}}, basePath: string = BASE_PATH) => {
            return fetchApi(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response{{#returnType}}.json(){{/returnType}};
                } else {
                    throw response;
                }
            });
        };
    },
{{/operation}}
};

/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{&description}}{{/description}}
 */
export class {{classname}} extends BaseAPI {
{{#operation}}
    /**{{#summary}}
     * {{summary}}{{/summary}}{{#notes}}
     * {{notes}}{{/notes}}{{#allParams}}
     * @param {{paramName}}{{#description}} {{description}}{{/description}}{{/allParams}}
     */
    {{nickname}}({{#hasParams}}params: { {{#allParams}} {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/allParams}} }, {{/hasParams}}options: any = {}) {
        return {{classname}}Fp.{{nickname}}({{#hasParams}}params, {{/hasParams}}{{#hasAuthMethods}}this.configuration, {{/hasAuthMethods}}options)(this.fetchApi, this.basePath);
    }
{{/operation}}
}

/**
 * {{classname}} - factory interface{{#description}}
 * {{&description}}{{/description}}
 */
export const {{classname}}Factory = function (fetchApi?: FetchAPI, basePath?: string) {
    return {
{{#operation}}
        /**{{#summary}}
         * {{summary}}{{/summary}}{{#notes}}
         * {{notes}}{{/notes}}{{#allParams}}
         * @param {{paramName}}{{#description}} {{description}}{{/description}}{{/allParams}}
         */
        {{nickname}}({{#hasParams}}params: { {{#allParams}} {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/allParams}} }, {{/hasParams}}{{#hasAuthMethods}}configuration: Configuration, {{/hasAuthMethods}}options: any = {}) {
            return {{classname}}Fp.{{nickname}}({{#hasParams}}params, {{/hasParams}}{{#hasAuthMethods}}configuration, {{/hasAuthMethods}}options)(fetchApi, basePath);
        },
{{/operation}}
    };
};

{{/operations}}
{{/apis}}
{{/apiInfo}}
